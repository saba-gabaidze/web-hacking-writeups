Lab: SSRF with filter bypass via open redirection
Difficulty: Practitioner

This one was a nice little mix of SSRF and open redirect. The app has a stock check feature that’s supposed to fetch data from an internal system, but of course, it’s locked down to prevent you from sending requests to internal IPs directly. So the trick was to abuse an open redirect in the app itself to sneak around the SSRF filter.

Logged in, went to any product page, and clicked “Check stock”. Burp caught the request — it looked like this:

GET /product/stock HTTP/1.1
Host: <lab-id>.web-security-academy.net
stockApi=/product/stockapi?productId=1
Tried replacing stockApi with an internal address directly, like:

stockApi=http://192.168.0.12:8080/admin
But no dice. The server clearly had some filtering in place to block external/internal IPs.

Clicked around a bit more and noticed the "Next product" button on the product pages. When clicked, it hit this endpoint:

/product/nextProduct?path=/some-product-id
And Burp showed it responding with a 302 redirect — the path value was just being dropped into the Location header. Classic open redirect.

So I tried chaining it together. Replaced stockApi with the redirect endpoint, but pointed the path to the internal admin panel:

stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin
Sent that off in Burp Repeater and bam — the stock checker followed the redirect and pulled in the internal admin page. Nice.

Now just needed to hit the right admin endpoint to delete Carlos. I tweaked the URL like this:

stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos
Sent the request, saw the “User deleted successfully” message, and the lab was done.

Root Cause

Two main problems working together here:

The app trusted user input in redirects, leading to an open redirect vuln

The SSRF protection relied only on filtering direct access to internal IPs — it didn’t account for redirection

Once the open redirect was in place, it was game over.

Fixes

Never allow open redirects without validation — always verify that the redirect destination is safe and same-origin

SSRF protections shouldn’t rely solely on filtering IPs; they should track the final resolved destination after all redirects

Use allowlists instead of trying to block bad stuff with regex or hostname rules
